import os, os.path, re, sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-y", "--year", help="Enter the year you want to check")
parser.add_argument("-m", "--mdj", nargs="?", default=False, help="Enter for MDJ search", type=bool)

dir = "dockets"

args = parser.parse_args()
assert 1996 < int(args.year) < 2020, "Year is out of range 1997-2020"
testdir = os.path.join(dir, args.year)

total = 0


if (args.mdj):
    mdj = [2101, 2102, 2103, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 3104, 3201, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3301, 3302, 3303, 4301, 4302, 4303, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5225, 5226, 5227, 5228, 5231, 5232, 5235, 5236, 5238, 5240, 5242, 5243, 5247, 5302, 5303, 5304, 5305, 5306, 5309, 5310, 5312, 5313, 5314, 5317, 6101, 6102, 6103, 6104, 6105, 6201, 6202, 6204, 6301, 6302, 6303, 6304, 6305, 6306, 6308, 6396, 7101, 7102, 7103, 7104, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7201, 7202, 7203, 7205, 7207, 7208, 7301, 7302, 7303, 8201, 8302, 8303, 8304, 9101, 9102, 9103, 9201, 9202, 9301, 9302, 9303, 9304, 9305, 10101, 10103, 10104, 10105, 10201, 10203, 10206, 10208, 10209, 10210, 10301, 10302, 10305, 10308, 10309, 10310, 10311, 11101, 11102, 11103, 11104, 11105, 11106, 11201, 11203, 11301, 11302, 11303, 11304, 11305, 11306, 11307, 11308, 11309, 12101, 12102, 12104, 12105, 12106, 12201, 12202, 12203, 12204, 12205, 12301, 12302, 12303, 12304, 12305, 13301, 13302, 13303, 14101, 14102, 14201, 14202, 14203, 14302, 14304, 14306, 15101, 15102, 15103, 15104, 15105, 15201, 15203, 15205, 15206, 15207, 15301, 15304, 15305, 15306, 15307, 15401, 15402, 15403, 15404, 16301, 16302, 16303, 16305, 16306, 17301, 17302, 17303, 17304, 18301, 18302, 18303, 18304, 19101, 19102, 19103, 19104, 19105, 19201, 19202, 19203, 19204, 19205, 19301, 19303, 19304, 19305, 19306, 19307, 19309, 19310, 19311, 20301, 20302, 20303, 20304, 21201, 21301, 21303, 21304, 21305, 21306, 21307, 22301, 22302, 22303, 22304, 23101, 23102, 23103, 23105, 23106, 23201, 23202, 23203, 23204, 23301, 23302, 23303, 23304, 23305, 23306, 23307, 23309, 24102, 24103, 24301, 24302, 24303, 24304, 25301, 25302, 25303, 26201, 26301, 26302, 26303, 26304, 27101, 27102, 27103, 27201, 27301, 27302, 27303, 27305, 27306, 27307, 27310, 28301, 28302, 28303, 28304, 29101, 29102, 29301, 29302, 29303, 29304, 30201, 30301, 30302, 30303, 30306, 31101, 31102, 31103, 31104, 31105, 31106, 31107, 31108, 31201, 31202, 31203, 31301, 31302, 31303, 32120, 32121, 32122, 32123, 32124, 32125, 32126, 32127, 32128, 32129, 32130, 32131, 32132, 32133, 32134, 32135, 32136, 32237, 32238, 32239, 32240, 32241, 32242, 32243, 32244, 32246, 32247, 32248, 32249, 32251, 32252, 32253, 32254, 33301, 33302, 33303, 33304, 34301, 34302, 34303, 35201, 35202, 35301, 35302, 35303, 36101, 36102, 36103, 36201, 36202, 36301, 36302, 36303, 36304, 37201, 37301, 37401, 37403, 37493, 38101, 38102, 38103, 38104, 38105, 38106, 38107, 38108, 38109, 38110, 38111, 38112, 38113, 38114, 38115, 38116, 38117, 38118, 38119, 38120, 38121, 38122, 38123, 38124, 38125, 38128, 38202, 38203, 38204, 38208, 38209, 39201, 39302, 39303, 39304, 39305, 39306, 39307, 39401, 39402, 39403, 40201, 40301, 40302, 40303, 41301, 41302, 41303, 41304, 41305, 42301, 42302, 42303, 42304, 43201, 43202, 43301, 43302, 43303, 43304, 43401, 43402, 43403, 43404, 44301, 44302, 44303, 44304, 45101, 45102, 45103, 45105, 45106, 45108, 45301, 45302, 45303, 45304, 46301, 46302, 46303, 46304, 47101, 47102, 47103, 47201, 47301, 47303, 47304, 47305, 47306, 47307, 48101, 48302, 48303, 48304, 49101, 49201, 49302, 49303, 49304, 49305, 50101, 50301, 50302, 50303, 50304, 50305, 50306, 51301, 51302, 51303, 51304, 52101, 52201, 52301, 52303, 52304, 52305, 53101, 53301, 53302, 53303, 53304, 54301, 54302, 54303, 55301, 55401, 55403, 56301, 56302, 56303, 56304, 57301, 57302, 57303, 57304, 58301, 58302, 58303, 59301, 59302, 59303, 60301, 60302, 60303, 60304]
    for i in mdj:
        regex = r"MJ-" + str(i).zfill(5) + "-.*"
        num = len([name for name in os.listdir(testdir) if (re.match(regex,name) and os.path.isfile(os.path.join(testdir, name)))])
        total += num
        print("MDJ %s: %s" % (i, num))
        

else: 
    counties = range(1,68)
    for i in counties:
        regex = r".*-[0]?" + str(i) + "-.*"
        num = len([name for name in os.listdir(testdir) if (re.match(regex,name) and os.path.isfile(os.path.join(testdir, name)))])
        total += num
        print("County %s: %s" % (i, num))
	

print("Total Dockets: %s" % (total))